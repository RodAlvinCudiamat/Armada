Task1:

first iteration: i = 0
console.log(`${inventory[0]}: ${inventoryCount[0]}`) 
Our index 0 in the inventory is apple.
Our index 0 in the inventoryCount is 10;
first print --> apple : 10

This process will iterate until i < inventory.length becomes false.
Final Output:
apple: 10
banana: 15
cherry: 5
date: 20
elderberry: 7


Task2:

The outer loop (i) iterates through each element of the words array, while the inner loop (j) compares the current word (words[i]) with
the next word (words[j]). If words[i] is greater than words[j] (meaning it comes later in the alphabet), the two elements are swapped
using a temporary variable temp. 

first iteration: i = 0
Comparing words[0] ("zebra") with words[1] ("apple")
    "zebra" > "apple" â†’ Swap
    New array: ["apple", "zebra", "mango", "cherry", "banana"]
Comparing words[0] ("apple") with words[2] ("mango")
    No swap needed
Comparing words[0] ("apple") with words[3] ("cherry")
    No swap needed
Comparing words[0] ("apple") with words[4] ("banana")
    No swap needed
This process continues for every element in the array, ensuring that the smallest words move to the front, 
and the array becomes sorted in alphabetical order.
Final Output:
['apple', 'banana', 'cherry', 'mango', 'zebra']


Task3:

The given JavaScript code generates an array of 10 unique random numbers between 1 and 20 using a while loop. It starts by initializing an
empty array named uniqueNumbers. The while loop runs until the array contains exactly 10 elements. Inside the loop, a random number between 
1 and 20 is generated using Math.random() and Math.floor(). Before adding this number to the array, the program checks whether it already exists
by iterating through uniqueNumbers using a for loop. If a duplicate is found, the exists flag is set to true, and the number is discarded.
Otherwise, it is added to the array. 

In the first iteration, the while loop begins execution because the uniqueNumbers array is empty, meaning its length is less than 10. A 
random number between 1 and 20 is generated using Math.floor(Math.random() * 20) + 1. Suppose the generated number is 7. The program then 
checks whether this number already exists in the uniqueNumbers array by iterating through it using a for loop. Since the array is initially 
empty, the loop does not run, and the exists flag remains false. Because the number 7 does not already exist, it is added to the array using push(). 
At the end of the first iteration, uniqueNumbers contains [7]. The while loop condition is checked again, and since the array's length is still less 
than 10, the loop proceeds to the next iteration. This process repeats until the array is filled with 10 unique numbers. Since the numbers are generated 
randomly, the output will be different each time the code runs.
Final Output:
[1, 12, 16, 3, 19, 5, 18, 11, 13, 20] 


Task4:

The code checks whether three given side lengths can form a valid triangle using the Triangle Inequality Theorem, which states that the sum of any two 
sides must be greater than the third side. It first initializes three variables: sideA = 7, sideB = 10, and sideC = 5. Then, it evaluates three conditions: 
whether sideA + sideB > sideC, sideB + sideC > sideA, and sideA + sideC > sideB. If all conditions are true, the program prints a message confirming that 
the given sides form a valid triangle. Otherwise, it prints a message stating that the sides do not form a triangle. In this case, all conditions are satisfied
(7 + 10 > 5, 10 + 5 > 7, and 7 + 5 > 10).
Final Output:
The sides 7, 10, and 5 form a valid triangle.